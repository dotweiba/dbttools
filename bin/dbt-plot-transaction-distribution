#!/usr/bin/env python

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2010 Mark Wong
#

import sys
from os import makedirs, system
from os.path import exists, realpath

import rpy2.robjects as robjects
from rpy2.robjects.vectors import DataFrame

if len(sys.argv) not in [6, 8]:
    print 'Create a distribution plot of a transaction.'
    print 'usage: %s <transaction name> <transaction tag> <mix.log> ' % \
            sys.argv[0]
    print '       <output directory>'
    print
    print '    <transaction name> - Name of the transaction'
    print '    <transaction tag> - ID used in the mix.log file'
    print '    <mix.log> - full path to the mix.log file'
    print '    <output directory> - location to write output files'
    print '    <x scale> - sec (seconds) or min (minutes)'
    print
    print 'Will attempt to create <output directory> if it does not exist.'
    sys.exit(1)

transaction_name = sys.argv[1]
transaction_tag = sys.argv[2]
infilename = sys.argv[3]
outputdir = sys.argv[4]
xscale = sys.argv[5]

if xscale not in ['sec', 'min']:
    print 'invalid x scale'
    sys.exit(1)

# TODO: Secret optional color arguments for R. Make less secret...
try:
    num_colors = sys.argv[6]
    color_index = sys.argv[7]
except:
    num_colors = None
    color_index = None

sample_length = 60

r = robjects.r

# Make sure the file exists.
if not exists(infilename):
    print 'cannot open file: %s' % infilename
    sys.exit(1)

# Create the output directory.
if not exists(outputdir):
    try:
        # FIXME: Like I know why makedirs() fails...
        #makedirs(outputdir)
        system('mkdir -p %s' % outputdir)
    except:
        print 'cannot create directory "%s"' % outputdir
        sys.exit(2)

outputdir = realpath(outputdir)

# Read in the data.
df = DataFrame.from_csvfile(infilename, header=False)
subset = r.subset(df, df.rx('V2').ro == transaction_tag)

start_ctime = r['as.numeric'](df[0][0])

if xscale == 'min':
    xlabel = 'Elapsed Time (minutes)'
    elapsed_time = (subset.rx(1).ro - start_ctime).ro / r['as.numeric'](60)
else:
    xlabel = 'Elapsed Time (seconds)'
    elapsed_time = subset.rx(1).ro - start_ctime

if num_colors is not None:
    color = r.rainbow(int(num_colors))

if num_colors is not None and color is not None:
    col = color[int(color_index) - 1]
else:
    col = 0

r.bitmap('%s/t%s-distribution.png' % (outputdir, transaction_tag),
         type = 'png16m', units = 'px', width = 1280, height = 800, res = 150,
         taa = 4, gaa = 4)
xmax = r.max(elapsed_time.rx(1))[0]
ymax = r.max(subset.rx(4))[0]
r.plot(elapsed_time[0], subset[3], xlim=r.c(0, xmax), ylim=r.c(0, ymax),
       type='p', col=col,
       main='%s Transaction Response Time Distribution' % transaction_name,
       xlab=xlabel, ylab='Response Time (seconds)')
r.grid(col='gray')
r('dev.off()')
