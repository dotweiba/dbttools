#!/usr/bin/env python

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006-2010 Mark Wong
#

import sys
from os import makedirs, system
from os.path import exists, realpath

import rpy2.robjects as robjects
from rpy2.robjects.vectors import DataFrame

r = robjects.r

def make_chart(tag, x, y, xmax, ymax_list, num_colors, title, ylabel, legend):
    r.bitmap('%s/vmstat-%s.png' % (outputdir, tag), type='png16m', units='px',
             width=1280, height=800, res=150, taa=4, gaa=4)

    color = r.rainbow(num_colors)
    ymax = r.max(*ymax_list)[0]

    # Plot the first set of data.
    r.plot(x, y[0], xlim=r.c(0, xmax), ylim=r.c(0, ymax), type='b',
           main=title, xlab='Elapsed Time (minutes)', ylab=ylabel, pch=1,
           col=color[0])

    # Plot the rest of the data.
    y.pop(0)
    index = 1
    for i in y:
        r.points(x, y=i, type='b', pch=index + 1, col=color[index])

        index += 1

    # Create a legend if there are any labels.
    int_list = list()
    index = 1
    for i in legend:
        int_list.append(index)
        index += 1
    if len(legend) > 0:
        r.legend('topright', r.c(*legend), pch=r.c(*int_list), col=color)

    r.grid(col='gray')
    r('dev.off()')

if len(sys.argv) != 3:
    print 'Create plots from vmstat output.'
    print 'usage: %s <vmstat.out> <outputdir>' % sys.argv[0]
    print
    print '    <vmstat.out> - full path to the vmstat.out file'
    print '    <output directory> - location to write output files'
    print
    print 'Will attempt to create <output directory> if it does not exist.'
    sys.exit(1)

infilename = sys.argv[1]
outputdir = sys.argv[2]

# Make sure we can oping the file to read in data.
try:
    f = open(infilename, 'r')
except:
    print 'cannot open file: %s' % infilename
    sys.exit(1)

# Make sure we can open the files to write to.

if not exists(outputdir):
    try:
        # FIXME: Like I know why makedirs() fails...
        #makedirs(outputdir)
        system('mkdir -p %s' % outputdir)
    except:
        print 'cannot create directory "%s"' % outputdir
        sys.exit(2)

outputdir = realpath(outputdir)

# Read in the data and write out the datafile for R.

# First identify the format.
format = 0
for line in f:
    c = line.strip().split()

    if c[0] == 'r' and len(c) == 16:
        # Format is:
        # r b swpd free buff cache si so bi bo in cs us sy id wa
        format = 1
        break
    elif c[0] == 'r' and len(c) == 17:
        # Format is:
        # r b swpd free buff cache si so bi bo in cs us sy id wa st
        # RHEL 5.5
        format = 2
        break

if format == 0:
    print 'unrecognize vmstat format, exiting...'
    sys.exit(1)
elif format == 1 or format == 2:
    c_r = 0
    c_b = 1
    c_swpd = 2
    c_free = 3
    c_buff = 4
    c_cache = 5
    c_si = 6
    c_so = 7
    c_bi = 8
    c_bo = 9
    c_in = 10
    c_cu = 11
    c_us = 12
    c_sy = 13
    c_id = 14
    c_wa = 15
    # If format is 2, then % steal is available at position 18 but assuming
    # this workload will never run on a VM host where % steal is used.

# Transform the raw data into Python lists before passing them to R.
counter = 0
data = dict()
# TODO: Initialize the data dict() based on the vmstat format identified.
data['elapsed_time'] = list()
data['r'] = list()
data['b'] = list()
data['swpd'] = list()
data['free'] = list()
data['buff'] = list()
data['cache'] = list()
data['si'] = list()
data['so'] = list()
data['bi'] = list()
data['bo'] = list()
# Somewhere betweeh python 2.4 (maybe other version) and R doesn't like 'in' as
# a column name.
data['intr'] = list()
data['cs'] = list()
data['us'] = list()
data['sy'] = list()
data['id'] = list()
data['wa'] = list()
for line in f:
    c = line.strip().split()

    if c[0] == 'procs' or c[0] == 'r':
        continue

    data['elapsed_time'].append(counter)
    # TODO: Fill in the data dict() based on the the vmstat format identified.
    data['r'].append(c[c_r])
    data['b'].append(c[c_b])
    data['swpd'].append(c[c_swpd])
    data['free'].append(c[c_free])
    data['buff'].append(c[c_buff])
    data['cache'].append(c[c_cache])
    data['si'].append(c[c_si])
    data['so'].append(c[c_so])
    data['bi'].append(c[c_bi])
    data['bo'].append(c[c_bo])
    data['intr'].append(c[c_in])
    data['cs'].append(c[c_cu])
    data['us'].append(c[c_us])
    data['sy'].append(c[c_sy])
    data['id'].append(c[c_id])
    data['wa'].append(c[c_wa])

    counter += 1
f.close()

# All values from vmstat are integers, convert all of them to R vectors and
# create an R data frame.
for key, value in data.iteritems():
    data[key] = robjects.IntVector(value)
df = r['data.frame'](**data)

# All charts will have the same x-axis range.
xmax = r.max(df.rx('elapsed_time'))[0]

# Plot process stats.
make_chart('procs', df.rx2('elapsed_time'), [df.rx2('r'), df.rx2('b')], xmax,
           [df.rx('r'), df.rx('b')], 2, 'Processes', 'Number of Processes',
           ['Waiting for Runtime', 'Uninterruptible in Sleep'])

# Plot memory stats.
make_chart('memory', df.rx2('elapsed_time'),
           [df.rx2('swpd'), df.rx2('free'), df.rx2('buff'), df.rx2('cache')],
           xmax,
           [df.rx('swpd'), df.rx('free'), df.rx('buff'), df.rx('cache')],
           4, 'Memory', 'Blocks', ['Swapped', 'Free', 'Buffered', 'Cached'])

# Plot swapping stats.
make_chart('swap', df.rx2('elapsed_time'), [df.rx2('si'), df.rx2('so')], xmax,
           [df.rx('si'), df.rx('so')], 2, 'Memory Swapped in from Disk',
           'Blocks', ['Swapped In', 'Swapped Out'])

# Plot i/o stats.
make_chart('io', df.rx2('elapsed_time'), [df.rx2('bi'), df.rx2('bo')], xmax,
           [df.rx('bi'), df.rx('bo')], 2, 'Blocks Input/Output',
           'Blocks per Second', ['Received from Device', 'Sent to Device Out'])

# Plot interrupts.
make_chart('in', df.rx2('elapsed_time'), [df.rx2('intr')], xmax,
           [df.rx('intr')], 2, 'Interrupts', 'Interrupts per Second', [])

# Plot context switches.
make_chart('cs', df.rx2('elapsed_time'), [df.rx2('cs')], xmax, [df.rx('cs')], 2,
           'Context Switches', 'Context Switches per Second', [])

# Plot processor utilization.
make_chart('cpu', df.rx2('elapsed_time'),
           [df.rx2('us'), df.rx2('sy'), df.rx2('id'), df.rx2('wa')], xmax,
           [df.rx('us'), df.rx('sy'), df.rx('id'), df.rx('wa')], 4,
           'Processor Utilization', 'Percentage',
           ['User', 'System', 'Idle', 'I/O Wait'])
