#!/usr/bin/env python

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006-2010 Mark Wong
#

import sys
from os import makedirs, system
from os.path import exists, realpath

def parse_format(f, format, d):
    counter = 0
    for line in f:
        c = line.strip().split()

        if c[0] == 'procs' or c[0] == 'r':
            continue

        d.write('%d' % counter)
        for i in c:
            d.write(' %s' % i)
        d.write('\n')
        counter += 1

def write_r_format(d, format, r_template):
    if format == 1:
        c_r = 2
        c_b = 3
        c_swpd = 4
        c_free = 5
        c_buff = 6
        c_cache = 7
        c_si = 8
        c_so = 9
        c_bi = 10
        c_bo = 11
        c_in = 12
        c_cu = 13
        c_us = 14
        c_sy = 15
        c_id = 16
        c_wa = 17
    elif format == 2:
        c_r = 2
        c_b = 3
        c_swpd = 4
        c_free = 5
        c_buff = 6
        c_cache = 7
        c_si = 8
        c_so = 9
        c_bi = 10
        c_bo = 11
        c_in = 12
        c_cu = 13
        c_us = 14
        c_sy = 15
        c_id = 16
        c_wa = 17
        # I annotate the column for % steal but don't plot it because I don't
        # expect anyone to actually test in a manner where % steal would even
        # be used. e.g. on a VM host.
        c_st = 18

    d.write(r_template % ('procs', 'max(d$V%d)' % c_r, 2, c_r,
            'Processes', 'Number of Processes'))
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 2, col = color[2])\n' % c_b)
    d.write('legend("topright", ' \
            'c("Waiting for Runtime", "Uninterruptible in Sleep"), ' \
            'pch = 1:2, col = color)\n')

    d.write(r_template % ('memory', 'max(d$V%d, d$V%d, d$V%d, d$V%d)' % \
            (c_swpd, c_free, c_buff, c_cache), 4, c_swpd, 'Memory', 'Blocks'))
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 2, col = color[2])\n' % c_free)
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 3, col = color[3])\n' % c_buff)
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 4, col = color[4])\n' % c_cache)
    d.write('legend("topright", c("Swapped", "Free", "Buffered", "Cached"), ' \
            'pch = 1:4, col = color)\n')

    d.write(r_template % ('swap', 'max(d$V%d, d$V%d)' % (c_si, c_so), 2, c_si,
            'Memory Swapped in from Disk', 'Blocks'))
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 2, col = color[2])\n' % c_so)
    d.write('legend("topright", c("Swapped In", "Swapped Out"), pch = 1:2,' \
            'col = color)\n')

    d.write(r_template % ('io', 'max(d$V%d, d$V%d)' % (c_bi, c_bo), 2, c_bi,
            'Blocks Input/Output', 'Blocks per Second'))
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 2, col = color[2])\n' %
c_bo)
    d.write('legend("topright", c("Received from Device", "Sent to Device"),' \
            'pch = 1:2, col = color)\n')

    d.write(r_template % ('in', 'max(d$V%d)' % c_in, 1, c_in,
            'Interrupts', 'Interrupts per Second'))

    d.write(r_template % ('cs', 'max(d$V%d)' % c_cu, 1, c_cu,
            'Context Switches', 'Context Switches per Second'))

    d.write(r_template % ('cpu', '100', 4, c_us,
            'Processor Utilization', 'Percentage'))
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 2, col = color[2])\n' % c_sy)
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 3, col = color[3])\n' % c_id)
    d.write('points(d$V1, y = d$V%d, type = "b", pch = 4, col = color[4])\n' % c_wa)
    d.write('legend("topright", c("User", "System", "Idle", "I/O Wait"), ' \
            'pch = 1:4, col = color)\n')

if len(sys.argv) != 3:
    print 'Create plots from vmstat output.'
    print 'usage: %s <vmstat.out> <outputdir>' % sys.argv[0]
    print
    print '    <vmstat.out> - full path to the vmstat.out file'
    print '    <output directory> - location to write output files'
    print
    print 'Will attempt to create <output directory> if it does not exist.'
    sys.exit(1)

infilename = sys.argv[1]
outputdir = sys.argv[2]

# Make sure we can oping the file to read in data.
try:
    f = open(infilename, 'r')
except:
    print 'cannot open file: %s' % infilename
    sys.exit(1)

# Make sure we can open the files to write to.

if not exists(outputdir):
    try:
        # FIXME: Like I know why makedirs() fails...
        #makedirs(outputdir)
        system('mkdir -p %s' % outputdir)
    except:
        print 'cannot create directory "%s"' % outputdir
        sys.exit(2)

outputdir = realpath(outputdir)

# Read in the data and write out the datafile for R.

# First identify the format.
format = 0
for line in f:
    c = line.strip().split()

    if c[0] == 'r' and len(c) == 16:
        # Format is:
        # r b swpd free buff cache si so bi bo in cs us sy id wa
        format = 1
        break
    elif c[0] == 'r' and len(c) == 17:
        # Format is:
        # r b swpd free buff cache si so bi bo in cs us sy id wa st
        # RHEL 5.5
        format = 2
        break

if format == 0:
    print 'unrecognize vmstat format, exiting...'
    sys.exit(1)

datafilename = 'vmstat.data'
try:
    d = open(outputdir + '/' + datafilename, 'w')
except:
    print 'cannot open file to write: %s/%s' % (outputdir, datafilename)
    sys.exit(3)
    
rfilename = 'vmstat.r'
try:
    r = open(outputdir + '/' + rfilename, 'w')
except:
    print 'cannot open file to write: %s/%s' % (outputdir, rfilename)
    sys.exit(4)

parse_format(f, format, d)

f.close()
d.close()

# Create the R files.

r_template = \
        'bitmap("vmstat-%s.png",\n' \
        '       type = "png16m",\n' \
        '       units = "px",\n' \
        '       width = 1280,\n' \
        '       height = 800,\n' \
        '       res = 150,\n' \
        '       taa = 4,\n' \
        '       gaa = 4)\n' \
        'xmax = max(d$V1)\n' \
        'ymax = %s\n' \
        'color <- rainbow(%d)\n' \
        'plot(d$V1,\n' \
        '     d$V%d,\n' \
        '     xlim = c(0, xmax),\n' \
        '     ylim = c(0, ymax),\n' \
        '     type = "b",\n' \
        '     main = "%s",\n' \
        '     xlab = "Elapsed Time (minutes)",\n' \
        '     ylab = "%s",\n' \
        '     col = color[1])\n' \
        'grid(col = "gray")\n'

r.write('d <- read.table("%s", header = FALSE)\n' % datafilename)
write_r_format(r, format, r_template)
r.close()

system('(cd %s && R --slave --no-save < %s)' % (outputdir, rfilename))
